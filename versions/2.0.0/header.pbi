;-------------------------------------------------------------;- SyncIt!;- small tool to synchronize two directories;- include file: header.pbi;- Copyright 2020 by Markus Mueller <markus.mueller.73 at hotmail dot de>;- This program is free software;-------------------------------------------------------------EnableExplicitUsePNGImageDecoder();-------------------------------------------------------------;-OS depended constantsCompilerSelect #PB_Compiler_OS    CompilerCase #PB_OS_Linux        #NL$                = #LF$        #DD$                = "/"        #APP_OS             = "Linux"        #APP_MAX_PATH       = #PATH_MAX        #APP_STRING_CASE    = #PB_String_CaseSensitive    CompilerCase #PB_OS_MacOS        #NL$                = #CR$        #DD$                = "/"        #APP_OS             = "Mac OS"        #APP_MAX_PATH       = 1016        #APP_STRING_CASE    = #PB_String_CaseSensitive    CompilerCase #PB_OS_Windows        #NL$                = #CRLF$        #DD$                = "\"        #APP_OS             = "MS Windows"        #APP_MAX_PATH       = #MAX_PATH        #APP_STRING_CASE    = #PB_String_NoCase  CompilerDefault    EndCompilerEndSelect;-------------------------------------------------------------;-CPU depended constantsCompilerSelect #PB_Compiler_Processor    CompilerCase #PB_Processor_x86        #APP_CPUVER = "x86 (32Bit)"    CompilerCase #PB_Processor_x64        #APP_CPUVER = "x86 (64Bit)"    CompilerCase #PB_Processor_Arm32        #APP_CPUVER = "arm (32Bit)"    CompilerCase #PB_Processor_Arm64        #APP_CPUVER = "arm (64Bit)"    CompilerDefault        #APP_CPUVER = "unknown"CompilerEndSelect;-------------------------------------------------------------;-app wide constants#MIN_PB_VER = 600#DOT$ = ".";-------------------------------------------------------------;-app specific constants#APP_NAME  = "SyncIt!"#APP_MAJOR = 2#APP_MINOR = 0#APP_MICRO = #PB_Editor_BuildCount#APP_VERSION = #APP_NAME + " v" + #APP_MAJOR + #DOT$ + #APP_MINOR + #DOT$ + #APP_MICRO + " (" + #APP_OS + " " + #APP_CPUVER + ")"#APP_ENCODING  = #PB_UTF8#APP_SEARCH_PATTERN = "*"Enumeration Differences    #APP_FILEATTR_EQUAL    #APP_FILEATTR_SRC_NOT_EXIST    #APP_FILEATTR_DST_NOT_EXIST    #APP_FILEATTR_SRC_IS_OLDER    #APP_FILEATTR_DST_IS_OLDER    #APP_FILEATTR_SRC_IS_BIGGER    #APP_FILEATTR_DST_IS_BIGGEREndEnumeration#APP_TEXTATTR_EQUAL         = "The files are equal."#APP_TEXTATTR_SRC_NOT_EXIST = "The SOURCE file doesn't exist."#APP_TEXTATTR_DST_NOT_EXIST = "The DESTINATION file doesn't exist."#APP_TEXTATTR_SRC_IS_OLDER  = "The SOURCE file is older."#APP_TEXTATTR_DST_IS_OLDER  = "The DESTINATION file is older."#APP_TEXTATTR_SRC_IS_BIGGER = "The SOURCE file is bigger."#APP_TEXTATTR_DST_IS_BIGGER = "The DESTINATION file is bigger."Enumeration 0    #APP_LOGTYPE_NONE    #APP_LOGTYPE_INFO    #APP_LOGTYPE_WARNING    #APP_LOGTYPE_ERROREndEnumerationCompilerIf #PB_Compiler_OS = #PB_OS_Linux Or #PB_Compiler_OS = #PB_OS_MacOS  #PB_FileSystem_Hidden = %10000000000000CompilerEndIf;-------------------------------------------------------------;-app specific structuresStructure _FILE_DATES  CompilerIf #PB_Compiler_OS = #PB_OS_Windows    created.l  CompilerEndIf  modified.l  accessed.lEndStructureStructure _FILE_DATES_EX  src._FILE_DATES  dst._FILE_DATESEndStructureStructure _PATHS  src.s  dst.sEndStructureStructure _SIZES  src.q  dst.qEndStructureStructure _FILE_DESCRIPTOR  attr.l            ; = file system attributes  date._FILE_DATES    diff.l            ; = internal attributes (differences)  size.q            ; = file size in bytes  name.s  path.s            ; with trailing path separatorEndStructureStructure _FILE_DESCRIPTOR_EX  attr.l              ; = file system attributes from the source file  date._FILE_DATES_EX  diff.l              ; = internal attributes (differences)  text.s              ; = internal attributes (differences) as text  size._SIZES         ; = file size in bytes  name.s  path._PATHS         ; with trailing path separator  to_copy.b           ; = TRUE if this file ist to synchronizeEndStructure;-------------------------------------------------------------;-global help functions and depending macrosProcedure.s format_timer( time_in_ms.l )  Protected.l h, m, s, ms  Protected.s result  If time_in_ms > 3600000    h = Int(time_in_ms / 3600000)    time_in_ms - (h * 3600000)  EndIf  If time_in_ms > 60000    m = Int(time_in_ms / 60000)    time_in_ms - (m * 60000)  EndIf  If time_in_ms > 1000    s = Int(time_in_ms / 1000)    time_in_ms - (s * 1000)  EndIf  ms = time_in_ms  result = RSet(Str(h),2,"0") +":" + RSet(Str(m),2,"0") + ":" + RSet(Str(s),2,"0") + "." +RSet(Str(ms),3,"0")  ProcedureReturn resultEndProcedureProcedure logger( message.s , type.b , start_logging.b = #False)        Static.b write_log = #False, set_once = #False    Static.l start_time        Protected.i h_log    Protected.s text        If start_logging        write_log = #True        set_once = #True        start_time = ElapsedMilliseconds()        h_log = CreateFile(#PB_Any, #APP_NAME + ".log")        CloseFile(h_log)    EndIf        text = format_timer(ElapsedMilliseconds()-start_time) + Space(2)        Select type        Case #APP_LOGTYPE_INFO    : text + "[INFO]" + Space(4)        Case #APP_LOGTYPE_WARNING : text + "[WARNING]" + Space(1)        Case #APP_LOGTYPE_ERROR   : text + "[ERROR]" + Space(3)    EndSelect        CompilerIf #PB_Compiler_Debugger        Debug text + message    CompilerEndIf        If write_log        h_log = OpenFile(#PB_Any, #APP_NAME + ".log", #PB_File_Append)        WriteStringN(h_log, text + message)        CloseFile(h_log)    EndIf        CompilerIf #PB_Compiler_Debugger = 0        If type = #APP_LOGTYPE_ERROR            MessageRequester("ERROR", message, #PB_MessageRequester_Error)            End 1        EndIf    CompilerEndIf    EndProcedure:logger(#APP_VERSION, #APP_LOGTYPE_INFO, #True)Macro _dq_    "EndMacroMacro void : : EndMacroMacro str_addr( long ) : "$" + RSet( Hex(long, #PB_Long) , 8, "0" ) : EndMacroMacro assert( expression )    CompilerIf #PB_Compiler_Debugger        If ( expression ) = 0            If #PB_Compiler_Procedure <> ""                logger("Assertion in expression " + _dq_ expression _dq_ + " in function " + #PB_Compiler_Procedure + " (near line " + #PB_Compiler_Line + ")", #APP_LOGTYPE_WARNING)            Else                logger("Assertion in expression " + _dq_ expression _dq_ + " in file " + #PB_Compiler_Filename + " (near line " + #PB_Compiler_Line + ")", #APP_LOGTYPE_WARNING)            EndIf        EndIf    CompilerElse        ( expression )    CompilerEndIfEndMacroMacro info( msg )    If #PB_Compiler_Procedure <> ""        logger(#PB_Compiler_Procedure + "() :: " + msg, #APP_LOGTYPE_INFO) :     Else        logger(#PB_Compiler_Filename + " :: " + msg, #APP_LOGTYPE_INFO) :     EndIfEndMacroMacro warn( msg )    If #PB_Compiler_Procedure <> ""        logger(#PB_Compiler_Procedure + "() :: " + msg + " (line " + #PB_Compiler_Line + ")", #APP_LOGTYPE_WARNING)    Else        logger(#PB_Compiler_Filename + " :: " + msg + " (line " + #PB_Compiler_Line + ")", #APP_LOGTYPE_WARNING)    EndIfEndMacroMacro err( msg )    If #PB_Compiler_Procedure <> ""        logger(#PB_Compiler_Procedure + "() :: " + msg + " (line " + #PB_Compiler_Line + ")", #APP_LOGTYPE_ERROR)    Else        logger(#PB_Compiler_Filename + " :: " + msg + " (line " + #PB_Compiler_Line + ")", #APP_LOGTYPE_WARNING)    EndIfEndMacroMacro del_list( list_name ) : If ListSize( list_name ) > 0 : ClearList( list_name ) : EndIf : EndMacro;-------------------------------------------------------------;-includesXIncludeFile "config_window.pbi"XIncludeFile "about_window.pbi"XIncludeFile "main_window.pbi"XIncludeFile "check_dir.pbi"XIncludeFile "synchronize.pbi";-------------------------------------------------------------;-binary data sectionDataSection  ICON_APP:  IncludeBinary ".." + #PS$ + "res" + #PS$ + "syncit_64.png"  ICON_FOLDER_OPEN_SMALL:  IncludeBinary ".." + #PS$ + "res" + #PS$ + "folder_open_16.png"  ICON_FOLDER_OPEN:  IncludeBinary ".." + #PS$ + "res" + #PS$ + "folder_open_32.png"EndDataSection; IDE Options = PureBasic 6.02 LTS (Windows - x64); CursorPosition = 84; FirstLine = 63; Folding = 8--; Optimizer; EnableXP; UseMainFile = main.pb; EnablePurifier; EnableCompileCount = 4; EnableBuildCount = 0; EnableExeConstant