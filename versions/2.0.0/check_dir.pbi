;-------------------------------------------------------------;- SyncIt!;- small tool to synchronize two directories;- include file: check_dir.pbi;- Copyright 2020 by Markus Mueller <markus.mueller.73 at hotmail dot de>;- This program is free software;-------------------------------------------------------------Macro _check_slash( directory )  If Right(directory, 1) <> #PS$    directory + #PS$  EndIfEndMacroMacro _add_result_data( diff_attr )  AddElement(result())  result()\diff = diff_attr  If diff_attr = #APP_FILEATTR_SRC_NOT_EXIST    result()\path\src = src_root_dir$ + RemoveString(dst_dir()\path, dst_root_dir$, #APP_STRING_CASE, 1, 1)    result()\path\dst = dst_dir()\path    result()\name     = dst_dir()\name    result()\attr     = dst_dir()\attr    result()\text     = #APP_TEXTATTR_SRC_NOT_EXIST  ElseIf diff_attr = #APP_FILEATTR_DST_NOT_EXIST    result()\path\src = src_dir()\path    result()\path\dst = dst_root_dir$ + RemoveString(src_dir()\path, src_root_dir$, #APP_STRING_CASE, 1, 1)    result()\name     = src_dir()\name    result()\attr     = src_dir()\attr    result()\text     = #APP_TEXTATTR_DST_NOT_EXIST  Else    result()\path\src           = src_dir()\path    result()\path\dst           = dst_dir()\path    result()\name               = src_dir()\name    result()\attr               = src_dir()\attr    result()\date\src\modified  = src_dir()\date\modified    result()\date\src\accessed  = src_dir()\date\accessed    result()\date\dst\modified  = dst_dir()\date\modified    result()\date\dst\accessed  = dst_dir()\date\accessed    result()\size\src           = src_dir()\size    result()\size\dst           = dst_dir()\size    Select diff_attr      Case #APP_FILEATTR_DST_IS_BIGGER  : result()\text = #APP_TEXTATTR_DST_IS_BIGGER      Case #APP_FILEATTR_DST_IS_OLDER   : result()\text = #APP_TEXTATTR_DST_IS_OLDER      Case #APP_FILEATTR_SRC_IS_BIGGER  : result()\text = #APP_TEXTATTR_SRC_IS_BIGGER      Case #APP_FILEATTR_SRC_IS_OLDER   : result()\text = #APP_TEXTATTR_SRC_IS_OLDER    EndSelect    DeleteElement(dst_dir(), 1)    Break  EndIfEndMacroProcedure.i get_directory_content( root_dir$ , List files._FILE_DESCRIPTOR() )    Protected.i dir_h, nb_of_files, tmp_attr  Protected.s new_dir    If FileSize(root_dir$) <> -2    warn("Directory '" + root_dir$ + "' did not exist.")    ProcedureReturn 0  EndIf    _check_slash(root_dir$)    dir_h = ExamineDirectory(#PB_Any, root_dir$, #APP_SEARCH_PATTERN)  If IsDirectory(dir_h)        info("Checking directory '" + root_dir$ + "' now.")        While NextDirectoryEntry(dir_h)            If DirectoryEntryType(dir_h) = #PB_DirectoryEntry_Directory                new_dir = DirectoryEntryName(dir_h)        If new_dir <> "." And new_dir <> ".."          nb_of_files + get_directory_content(root_dir$ + new_dir, files())        EndIf              ElseIf DirectoryEntryType(dir_h) = #PB_DirectoryEntry_File                AddElement(files())        files()\path          = root_dir$        files()\name          = DirectoryEntryName(dir_h)        files()\size          = DirectoryEntrySize(dir_h)        tmp_attr              = DirectoryEntryAttributes(dir_h)        files()\date\accessed = DirectoryEntryDate(dir_h, #PB_Date_Accessed)        files()\date\modified = DirectoryEntryDate(dir_h, #PB_Date_Accessed)        CompilerIf #PB_Compiler_OS = #PB_OS_Windows          files()\date\created  = DirectoryEntryDate(dir_h, #PB_Date_Accessed)          files()\attr = tmp_attr        CompilerElse          If Left(files()\name, 1) = #DOT$            files()\attr = #PB_FileSystem_Hidden | tmp_attr          EndIf        CompilerEndIf                nb_of_files + 1              EndIf          Wend        FinishDirectory(dir_h)        info("Finished directory '" + root_dir$ + "', found " + Str(nb_of_files) + " files.")      Else    warn("Can't access directory '" + root_dir$ + "'.")    ProcedureReturn 0  EndIf    ProcedureReturn nb_of_files  EndProcedureProcedure.i compare_directories ( src_root_dir$, List src_dir._FILE_DESCRIPTOR() , dst_root_dir$, List dst_dir._FILE_DESCRIPTOR() , List result._FILE_DESCRIPTOR_EX() )    info("comparing directories '" + src_root_dir$ + "' and '" + dst_root_dir$ + "'")    If ListSize(src_dir()) = 0    ProcedureReturn 0  EndIf    If ListSize(result()) > 0    ClearList(result())  EndIf      If ListSize(dst_dir()) = 0        info("destination dir '" + dst_root_dir$ + "' is empty.")    EndIf    Protected.b dst_not_found  Protected.f progress, one_perc = ListSize(src_dir()) / 100  Protected.s src_rel_path, dst_rel_path    _check_slash(src_root_dir$)  _check_slash(dst_root_dir$)    info("checking source directory")  ForEach src_dir()        progress = ListIndex(src_dir()) / one_perc        dst_not_found = #True    src_rel_path = RemoveString(src_dir()\path + src_dir()\name, src_root_dir$, #APP_STRING_CASE, 1, 1)        ForEach dst_dir()            dst_rel_path = RemoveString(dst_dir()\path + dst_dir()\name, dst_root_dir$, #APP_STRING_CASE, 1, 1)            If CompareMemoryString(@src_rel_path, @dst_rel_path, #APP_STRING_CASE) = #PB_String_Equal                dst_not_found = #False                If dst_dir()\date\modified < src_dir()\date\modified          _add_result_data(#APP_FILEATTR_DST_IS_OLDER)        ElseIf dst_dir()\date\modified > src_dir()\date\modified          _add_result_data(#APP_FILEATTR_SRC_IS_OLDER)        EndIf                If dst_dir()\size < src_dir()\size          _add_result_data(#APP_FILEATTR_SRC_IS_BIGGER)        ElseIf dst_dir()\size > src_dir()\size          _add_result_data(#APP_FILEATTR_DST_IS_BIGGER)        EndIf                DeleteElement(dst_dir(), 1)        Break              EndIf          Next        If dst_not_found      _add_result_data(#APP_FILEATTR_DST_NOT_EXIST)    EndIf      Next    info("compare of source and destination directory done")    If ListSize(dst_dir()) > 0    info("found " + Str(ListSize(dst_dir())) + " more files in destination directory")    ForEach dst_dir()      _add_result_data(#APP_FILEATTR_SRC_NOT_EXIST)    Next  EndIf    ClearList(src_dir())  ClearList(dst_dir())    info("compare operation complete, found " + Str(ListSize(result())) + " differences")  ProcedureReturn ListSize(result())  EndProcedure; IDE Options = PureBasic 6.02 LTS (Windows - x64); CursorPosition = 6; Folding = -; Optimizer; EnableXP; EnablePurifier; EnableCompileCount = 0; EnableBuildCount = 0; EnableExeConstant