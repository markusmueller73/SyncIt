;;-;EnableExplicit#PATTERN = "*"Enumeration -1  #APP_DST_IS_GREATER  #APP_SIZE_IS_EQUAL  #APP_SRC_IS_GREATEREndEnumerationEnumeration -1  #APP_DST_IS_OLDER  #APP_DATE_IS_EQUAL  #APP_SRC_IS_OLDEREndEnumerationEnumeration 0  #APP_FILE_NOT_EXIST  #APP_FILE_IS_DEFAULT  #APP_FILE_IS_HIDDEN  #APP_FILE_IS_SYSTEMEndEnumerationStructure _FILE_DATE  ;created.l  accessed.l  modified.lEndStructureStructure _FILE_DESCRIPTOR  size.q  date._FILE_DATE  attr.l  path.s  name.sEndStructureStructure _RESULT_FILE  rel_path.s  name.s  size.b  age.b  sys.bEndStructureStructure _RESULT  src_dir.s  dst_dir.s  List files._RESULT_FILE()EndStructureMacro info( msg ) : Debug "[INFO] " + msg : EndMacroMacro warn( msg ) : Debug "[WARN] " + msg : EndMacroMacro _add_ps( path ) : If Right(path, 1) <> #PS$ : path + #PS$ : EndIf : EndMacroProcedure is_hidden ( filename$ , fileattr.l )    CompilerIf #PB_Compiler_OS = #PB_OS_Windows        If fileattr & #pb_filesystem_hidden      ProcedureReturn #True    ElseIf fileattr & #pb_filesstem_system      ProcedureReturn #True    EndIf      CompilerElse        If Left(filename$, 1) = "." : ProcedureReturn #True : EndIf      CompilerEndIf    ProcedureReturn #False    EndProcedureProcedure.i check_dir ( root_dir$ , List files._FILE_DESCRIPTOR() )    If root_dir$ = "" Or root_dir$ = ".."    info("The directory name was empty or invalid.")    ProcedureReturn 0  EndIf    If FileSize(root_dir$) <> -2    info("The directory '" + root_dir$ + "' didn't exist.")    ProcedureReturn 0  EndIf    Protected.i nb_of_dirs, dir_h  Protected.s next_dir    _add_ps(root_dir$)    dir_h = ExamineDirectory(#PB_Any, root_dir$, #PATTERN)  If IsDirectory(dir_h)        While NextDirectoryEntry(dir_h)            If DirectoryEntryType(dir_h) = #PB_DirectoryEntry_File                AddElement(files())        With files()          \path = root_dir$          \name = DirectoryEntryName(dir_h)          \size = DirectoryEntrySize(dir_h)          \date\accessed = DirectoryEntryDate(dir_h, #PB_Date_Accessed)          \date\modified = DirectoryEntryDate(dir_h, #PB_Date_Modified)          \attr = is_hidden(\name, DirectoryEntryAttributes(dir_h))        EndWith              Else; = ElseIf DirectoryEntryType(dir_h) = #PB_DirectoryEntry_Directory                next_dir = DirectoryEntryName(dir_h)                If next_dir <> "." And next_dir <> ".."          nb_of_dirs + check_dir(next_dir, files()) + 1        EndIf              EndIf          Wend        FinishDirectory(dir_h)      Else    warn("Can't open/examine the directory '" + root_dir$ + "'.")    ProcedureReturn 0  EndIf    ProcedureReturn nb_of_dirs  EndProcedureProcedure.i compare_dirs ( src_dir$ , List src_files._FILE_DESCRIPTOR() , dst_dir$ , List dst_files._FILE_DESCRIPTOR() , *result._RESULT )    Protected.b src_file_found  Protected src_file$, dst_file$    _add_ps(src_dir$) : _add_ps(dst_dir$)    *result\src_dir = src_dir$  *result\dst_dir = dst_dir$    ForEach src_files()        CompilerIf #PB_Compiler_OS = #PB_OS_Windows      src_file$ = RemoveString(src_files()\path, src_dir$, #PB_String_NoCase, 1, 1) + src_files()\name    CompilerElse      src_file$ = RemoveString(src_files()\path, src_dir$, #PB_String_CaseSensitive, 1, 1) + src_files()\name    CompilerEndIf        src_file_found = #False        ForEach dst_files()            CompilerIf #PB_Compiler_OS = #PB_OS_Windows        dst_file$ = RemoveString(dst_files()\path, dst_dir$, #PB_String_NoCase, 1, 1) + dst_files()\name      CompilerElse        dst_file$ = RemoveString(dst_files()\path, dst_dir$, #PB_String_CaseSensitive, 1, 1) + dst_files()\name      CompilerEndIf            CompilerIf #PB_Compiler_OS = #PB_OS_Windows                If CompareMemoryString(@src_file$, @dst_file$, #PB_String_NoCase) = #PB_String_Equal                    If src_files()\date\modified <> dst_files()\date\modified                    EndIf                    If src_files()\size = dst_files()\size                      EndIf                    DeleteElement(dst_files(), 1)                    Continue                  EndIf                CompilerElse                If CompareMemoryString(@src_file$, @dst_file$, #PB_String_CaseSensitive) = #PB_String_Equal                    If src_files()\date\modified <> dst_files()\date\modified                    EndIf                    If src_files()\size = dst_files()\size                      EndIf                    DeleteElement(dst_files(), 1)                    Continue                  EndIf              CompilerEndIf            Next        If src_file_found = #False            AddElement(*result\files())      With *result\files()                \rel_path = GetPathPart(src_file$)        \name     = GetFilePart(src_file$)        \size     = #APP_FILE_NOT_EXIST        \age      = #APP_FILE_NOT_EXIST        \sys      = src_files()\attr              EndWith          EndIf      Next  EndProcedure; IDE Options = PureBasic 5.71 LTS (MacOS X - x64); CursorPosition = 110; FirstLine = 72; Folding = 4-; EnableXP; EnablePurifier; EnableCompileCount = 2; EnableBuildCount = 0; EnableExeConstant